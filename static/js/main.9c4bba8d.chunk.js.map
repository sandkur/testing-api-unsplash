{"version":3,"sources":["App.js","Test.js","Router.js","serviceWorker.js","index.js"],"names":["ACCESS_KEY","API_URL","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","imgs","getPhoto","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","keySearch","api_call","data","wrap","_context","prev","next","preventDefault","value","fetch","sent","json","console","log","results","setState","stop","_x","inherits","createClass","key","_this2","react_default","createElement","className","onSubmit","type","ref","input","Component","Test","Router","_React$Component","BrowserRouter","Switch","Route","path","component","exact","React","Boolean","window","location","hostname","match","ReactDOM","render","Router_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c4bba8d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst ACCESS_KEY = \"a9f020ade0a6ba6d2ba84ba91345fb4e73fa64ad1c0b6221233b55c6f12c3b29\";\n\nconst SEC_KEY = \"a58a8b865b6c650eb94003187fae318d94b86e2c538e0c800670f0a7228c11cf\";\n\nconst API_URL = \"https://cors-anywhere.herokuapp.com/\";\nexport class App extends Component {\n  state = {\n  \timgs: []\n  }\n  getPhoto = async (e) => {\n  \te.preventDefault();\n    const keySearch = this.keySearch.value;\n  \tconst api_call = await fetch(`${API_URL}https://api.unsplash.com/search/photos?per_page=20&query=${keySearch}&client_id=${ACCESS_KEY}`);\n  \tconst data = await api_call.json();\n  \tconsole.log(data.results);\n\n  \tthis.setState({\n  \t\timgs:data\n  \t})\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      \t<form onSubmit={this.getPhoto}>\n      \t\t<input type='teks' ref={(input) => (this.keySearch) = input }/>\n      \t\t<button> get </button>\n      \t</form>\n      \t<div className='images'>\n\n      \t</div>\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\r\n\r\nexport class Test extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Test\">\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport {App} from './App';\r\nimport {Test} from './Test';\r\nimport {BrowserRouter, Switch, Route } from 'react-router-dom';\r\nexport class Router extends React.Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path='/' component={App} exact />\r\n\t\t\t\t\t<Route path='/test' component={Test} exact />\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t);\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Router} from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}